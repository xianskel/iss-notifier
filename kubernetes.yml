apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: api-gateway
    name: api-gateway
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: api-gateway
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
    selector:
      io.kompose.service: elasticsearch
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: front-end
    name: front-end
  spec:
    ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
    selector:
      io.kompose.service: front-end
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: iss-service
    name: iss-service
  spec:
    ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
    selector:
      io.kompose.service: iss-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
    selector:
      io.kompose.service: kibana
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: logstash
    name: logstash
  spec:
    ports:
    - name: "5044"
      port: 5044
      targetPort: 5044
    selector:
      io.kompose.service: logstash
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
    selector:
      io.kompose.service: mongo
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: notification-service
    name: notification-service
  spec:
    ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
    selector:
      io.kompose.service: notification-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: rabbitmq-server
    name: rabbitmq-server
  spec:
    ports:
    - name: "15672"
      port: 15672
      targetPort: 15672
    - name: "5672"
      port: 5672
      targetPort: 5672
    selector:
      io.kompose.service: rabbitmq-server
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: subscription-service
    name: subscription-service
  spec:
    ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
    selector:
      io.kompose.service: subscription-service
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: api-gateway
    name: api-gateway
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: api-gateway
    strategy: {}
    template:
      metadata:
        annotations:
          collect_logs: "true"
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: api-gateway
      spec:
        containers:
        - env:
          - name: ISS_HOST
            value: iss-service
          - name: SUB_HOST
            value: subscription-service
          image: api-gateway
          imagePullPolicy: ""
          name: api-gateway
          ports:
          - containerPort: 8080
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elasticsearch
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: elasticsearch
      spec:
        containers:
        - env:
          - name: ES_JAVA_OPTS
            value: -Xms750m -Xmx750m
          - name: bootstrap.memory_lock
            value: "true"
          - name: cluster.initial_master_nodes
            value: elasticsearch
          - name: cluster.name
            value: docker-cluster
          - name: discovery.seed_hosts
            value: elasticsearch
          - name: logger.level
            value: info
          - name: node.name
            value: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.1.1
          imagePullPolicy: ""
          name: elasticsearch
          ports:
          - containerPort: 9200
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticdata
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: elasticdata
          persistentVolumeClaim:
            claimName: elasticdata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticdata
    name: elasticdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: filebeat
    name: filebeat
  spec:
    containers:
    - image: docker.elastic.co/beats/filebeat:7.1.1
      name: filebeat
      resources: {}
      volumeMounts:
      - mountPath: /usr/share/filebeat/filebeat.yml
        name: filebeat-claim0
        readOnly: true
      - mountPath: /var/lib/docker/containers
        name: filebeat-claim1
        readOnly: true
      - mountPath: /var/run/docker.sock
        name: filebeat-claim2
        readOnly: true
      - mountPath: /usr/share/filebeat/data
        name: filebeatdata
    restartPolicy: OnFailure
    volumes:
    - name: filebeat-claim0
      persistentVolumeClaim:
        claimName: filebeat-claim0
        readOnly: true
    - name: filebeat-claim1
      persistentVolumeClaim:
        claimName: filebeat-claim1
        readOnly: true
    - name: filebeat-claim2
      persistentVolumeClaim:
        claimName: filebeat-claim2
        readOnly: true
    - name: filebeatdata
      persistentVolumeClaim:
        claimName: filebeatdata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: filebeat-claim0
    name: filebeat-claim0
  spec:
    accessModes:
    - ReadOnlyMany
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: filebeat-claim1
    name: filebeat-claim1
  spec:
    accessModes:
    - ReadOnlyMany
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: filebeat-claim2
    name: filebeat-claim2
  spec:
    accessModes:
    - ReadOnlyMany
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: filebeatdata
    name: filebeatdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: front-end
    name: front-end
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: front-end
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: front-end
      spec:
        containers:
        - image: front-end
          imagePullPolicy: ""
          name: front-end
          ports:
          - containerPort: 3000
          resources: {}
          stdin: true
          tty: true
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: iss-service
    name: iss-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: iss-service
    strategy: {}
    template:
      metadata:
        annotations:
          collect_logs: "true"
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: iss-service
      spec:
        containers:
        - env:
          - name: AMQP_HOST
            value: rabbitmq-server
          - name: HOST
            value: iss-service
          image: iss-service
          imagePullPolicy: ""
          name: iss-service
          ports:
          - containerPort: 8081
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kibana
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: kibana
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_URL
            value: http://elasticsearch:9200
          image: docker.elastic.co/kibana/kibana:7.1.1
          imagePullPolicy: ""
          name: kibana
          ports:
          - containerPort: 5601
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: logstash
    name: logstash
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: logstash
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: logstash
      spec:
        containers:
        - env:
          - name: path.config
            value: /usr/share/logstash/pipeline
          image: logstash
          imagePullPolicy: ""
          name: logstash
          ports:
          - containerPort: 5044
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/logstash/pipeline
            name: logstash-claim0
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: logstash-claim0
          persistentVolumeClaim:
            claimName: logstash-claim0
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: logstash-claim0
    name: logstash-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mongo
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: mongo
      spec:
        containers:
        - image: mongo
          imagePullPolicy: ""
          name: mongo
          ports:
          - containerPort: 27017
          resources: {}
          volumeMounts:
          - mountPath: /data/db
            name: mongodata
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mongodata
          persistentVolumeClaim:
            claimName: mongodata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mongodata
    name: mongodata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: notification-service
    name: notification-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: notification-service
    strategy: {}
    template:
      metadata:
        annotations:
          collect_logs: "true"
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: notification-service
      spec:
        containers:
        - env:
          - name: AMQP_HOST
            value: rabbitmq-server
          image: notification-service
          imagePullPolicy: ""
          name: notification-service
          ports:
          - containerPort: 8083
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: rabbitmq-server
    name: rabbitmq-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: rabbitmq-server
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: rabbitmq-server
      spec:
        containers:
        - image: rabbitmq:3-management
          imagePullPolicy: ""
          name: rabbitmq-server
          ports:
          - containerPort: 15672
          - containerPort: 5672
          resources: {}
        hostname: rabbitmq-server
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      collect_logs: "true"
      kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: subscription-service
    name: subscription-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: subscription-service
    strategy: {}
    template:
      metadata:
        annotations:
          collect_logs: "true"
          kompose.cmd: kompose convert -f docker-compose.yml -o simple.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: subscription-service
      spec:
        containers:
        - env:
          - name: AMQP_HOST
            value: rabbitmq-server
          - name: HOST
            value: subscription-service
          - name: MONGO_DB_URI
            value: mongodb://mongo:27017/subscription-service
          - name: SCHEDULE
            value: '* * * * *'
          image: subscription-service
          imagePullPolicy: ""
          name: subscription-service
          ports:
          - containerPort: 8082
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
kind: List
metadata: {}

